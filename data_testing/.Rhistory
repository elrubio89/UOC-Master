"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
RGI_seqs_bam<-RGI_seqs_bam%>%select(X1, X3)%>%rename(data_seq=X1, `Reference Sequence`=X3 )
Groot_seqs_bam <- read_delim("groot_analysis/Groot_seqs_bam.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
Groot_seqs_bam<-Groot_seqs_bam%>%select(X1, X3)%>%rename(data_seq=X1, `Reference Sequence`=X3 )
RGI_seqs_bam<-merge(RGI_seqs_bam, select(RGI_data, `AMR Gene Family`,`Reference Sequence`,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by="Reference Sequence", all.x = TRUE)
library(stringr)
str_split_fixed(RGI_seqs_bam$data_seq, "~~~", 3)
str_split_fixed(RGI_seqs_bam$data_seq, "~~~", 3)[2]
str_split_fixed(RGI_seqs_bam$data_seq, "~~~", 3)[,2]
RGI_seqs_bam$data_seq<-str_split_fixed(RGI_seqs_bam$data_seq, "~~~", 3)[,2]
library(readr)
RGI_seqs_bam <- read_delim("RGI_analysis/RGI_seqs_bam.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
RGI_seqs_bam<-RGI_seqs_bam%>%select(X1, X3)%>%rename(data_seq=X1, `Reference Sequence`=X3 )
RGI_seqs_bam<-merge(RGI_seqs_bam, select(RGI_data, `AMR Gene Family`,`Reference Sequence`,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by="Reference Sequence", all.x = TRUE)
RGI_seqs_bam$data_seq<-str_split_fixed(RGI_seqs_bam$data_seq, "~~~", 3)[,2]
tr_split_fixed(RGI_seqs_bam$data_seq, ")", 2)
str_split_fixed(RGI_seqs_bam$data_seq, ")", 2)
str_split_fixed(RGI_seqs_bam$data_seq, "\\)", 2)
str_split_fixed(RGI_seqs_bam$data_seq, "\\)", 2)[ ,2]
RGI_seqs_bam$data_seq<-str_split_fixed(RGI_seqs_bam$data_seq, "~~~", 3)[,2]
RGI_seqs_bam$data_seq<-str_split_fixed(RGI_seqs_bam$data_seq, "\\)", 2)[ ,2]
library(readr)
RGI_seqs_bam <- read_delim("RGI_analysis/RGI_seqs_bam.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
RGI_seqs_bam<-RGI_seqs_bam%>%select(X1, X3)%>%rename(data_seq=X1, `Reference Sequence`=X3 )
RGI_seqs_bam<-merge(RGI_seqs_bam, select(RGI_data, `AMR Gene Family`,`Reference Sequence`,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by="Reference Sequence", all.x = TRUE)
RGI_seqs_bam$data_seq<-str_split_fixed(RGI_seqs_bam$data_seq, "~~~", 3)[,2]
RGI_seqs_bam$data_seq<-str_split_fixed(RGI_seqs_bam$data_seq, "\\)", 2)[ ,2]
library(readr)
RGI_seqs_bam <- read_delim("RGI_analysis/RGI_seqs_bam.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
RGI_seqs_bam<-RGI_seqs_bam%>%select(X1, X3)%>%rename(data_seq=X1, `Reference Sequence`=X3 )
Groot_seqs_bam <- read_delim("groot_analysis/Groot_seqs_bam.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
Groot_seqs_bam<-Groot_seqs_bam%>%select(X1, X3)%>%rename(data_seq=X1, `Reference Sequence`=X3 )
RGI_seqs_bam<-merge(RGI_seqs_bam, select(RGI_data, `AMR Gene Family`,`Reference Sequence`,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by="Reference Sequence", all.x = TRUE)
RGI_seqs_bam$data_seq_simplified<-str_split_fixed(RGI_seqs_bam$data_seq, "~~~", 3)[,2]
RGI_seqs_bam$data_seq_simplified<-str_split_fixed(RGI_seqs_bam$data_seq_simplified, "\\)", 2)[ ,2]
View(Groot_data)
Groot_seqs_bam<-merge(Groot_seqs_bam, select(Groot_data, `AMR Gene Family`,AMR.gene,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by.x="Reference Sequence", by.y="AMR.gene", all.x = TRUE)
Groot_seqs_bam$data_seq_simplified<-str_split_fixed(Groot_seqs_bam$data_seq, "~~~", 3)[,2]
Groot_seqs_bam$data_seq_simplified<-str_split_fixed(Groot_seqs_bam$data_seq_simplified, "\\)", 2)[ ,2]
Groot_seqs_bam <- read_delim("groot_analysis/Groot_seqs_bam.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
Groot_seqs_bam<-Groot_seqs_bam%>%select(X1, X3)%>%rename(data_seq=X1, `Reference Sequence`=X3 )
View(Groot_seqs_bam)
Groot_seqs_bam$`Reference Sequence`<-str_remove(Groot_seqs_bam$`Reference Sequence`, "*")
Groot_seqs_bam$`Reference Sequence`<-str_remove(Groot_seqs_bam$`Reference Sequence`, "\\*")
Groot_seqs_bam<-merge(Groot_seqs_bam, select(Groot_data, `AMR Gene Family`,AMR.gene,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by.x="Reference Sequence", by.y="AMR.gene", all.x = TRUE)
Groot_seqs_bam$data_seq_simplified<-str_split_fixed(Groot_seqs_bam$data_seq, "~~~", 3)[,2]
Groot_seqs_bam$data_seq_simplified<-str_split_fixed(Groot_seqs_bam$data_seq_simplified, "\\)", 2)[ ,2]
write.table(RGI_seqs_bam, "RGI_analysis/RGI_seqs_bam.txt", quote = FALSE)
write.table(Groot_seqs_bam, "groot_analysis/Groot_seqs_bam.txt", quote = FALSE)
#write_tsv(AMR_family, "AMR_family.tsv")
write_tsv(RGI_seqs_bam, "RGI_analysis/RGI_seqs_bam.tsv")
write_table(Groot_seqs_bam, "groot_analysis/Groot_seqs_bam.tsv")
write_tsv(Groot_seqs_bam, "groot_analysis/Groot_seqs_bam.tsv")
library(readr)
RGI_seqs_bam <- read_delim("RGI_analysis/RGI_seqs_bam.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
RGI_seqs_bam<-RGI_seqs_bam%>%select(X1, X3)%>%rename(data_seq=X1, `Reference Sequence`=X3 )
Groot_seqs_bam <- read_delim("groot_analysis/Groot_seqs_bam.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
Groot_seqs_bam<-Groot_seqs_bam%>%select(X1, X3)%>%rename(data_seq=X1, `Reference Sequence`=X3 )
Groot_seqs_bam$`Reference Sequence`<-str_remove(Groot_seqs_bam$`Reference Sequence`, "\\*")
Groot_seqs_bam<-merge(Groot_seqs_bam, select(Groot_data, `AMR Gene Family`,AMR.gene,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by.x="Reference Sequence", by.y="AMR.gene", all.x = TRUE)
Groot_seqs_bam$data_seq_simplified<-str_split_fixed(Groot_seqs_bam$data_seq, "~~~", 3)[,2]
Groot_seqs_bam$data_seq_simplified<-str_split_fixed(Groot_seqs_bam$data_seq_simplified, "\\)", 2)[ ,2]
write_tsv(RGI_seqs_bam, "RGI_analysis/RGI_seqs_bam.tsv")
write_tsv(Groot_seqs_bam, "groot_analysis/Groot_seqs_bam.tsv")
library(readr)
RGI_seqs_bam <- read_delim("RGI_analysis/RGI_seqs_bam.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
RGI_seqs_bam<-RGI_seqs_bam%>%select(X1, X3)%>%rename(data_seq=X1, `Reference Sequence`=X3 )
Groot_seqs_bam <- read_delim("groot_analysis/Groot_seqs_bam.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
Groot_seqs_bam<-Groot_seqs_bam%>%select(X1, X3)%>%rename(data_seq=X1, `Reference Sequence`=X3 )
Groot_seqs_bam$`Reference Sequence`<-str_remove(Groot_seqs_bam$`Reference Sequence`, "\\*")
RGI_seqs_bam<-merge(RGI_seqs_bam, select(RGI_data, `AMR Gene Family`,`Reference Sequence`,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by="Reference Sequence", all.x = TRUE)
RGI_seqs_bam$data_seq_simplified<-str_split_fixed(RGI_seqs_bam$data_seq, "~~~", 3)[,2]
RGI_seqs_bam$data_seq_simplified<-str_split_fixed(RGI_seqs_bam$data_seq_simplified, "\\)", 2)[ ,2]
Groot_seqs_bam<-merge(Groot_seqs_bam, select(Groot_data, `AMR Gene Family`,AMR.gene,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by.x="Reference Sequence", by.y="AMR.gene", all.x = TRUE)
Groot_seqs_bam$data_seq_simplified<-str_split_fixed(Groot_seqs_bam$data_seq, "~~~", 3)[,2]
Groot_seqs_bam$data_seq_simplified<-str_split_fixed(Groot_seqs_bam$data_seq_simplified, "\\)", 2)[ ,2]
write_tsv(RGI_seqs_bam, "RGI_analysis/RGI_seqs_bam.tsv")
write_tsv(Groot_seqs_bam, "groot_analysis/Groot_seqs_bam.tsv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Documentos/Repos/UOC-Master/data_testing/")
library(stringr)
library(reshape2)
library(readr)
library(dplyr)
aro_index <- read_delim("~/Documentos/Repos/UOC-Master/PRJNA307231/aro_index.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
dim(aro_index)
length(unique(aro_index$`ARO Accession`))
y<-colsplit(aro_index$`ARO Accession`, ":", c("X", "ARO Number"))
aro_index<-cbind(aro_index, select(y, `ARO Number`))
library(readr)
RGI_data <- read_delim("RGI_analysis/argannot-150bp-10000-reads.fastq_RGI_output.allele_mapping_data.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
RGI_data<-merge(
select(RGI_data, -`AMR Gene Family`, -`Drug Class`, -`Resistance Mechanism`),
select(aro_index,`Model Sequence ID`, `AMR Gene Family`,`Drug Class`, `Resistance Mechanism`,`Protein Accession`,`ARO Number`, `ARO Name` ), by.x = "ARO Accession", by.y="ARO Number", all.x = TRUE)
table(is.na(RGI_data$`AMR Gene Family`))
library(dplyr)
totalNumReads<-	10000
RGI_data<-RGI_data%>%mutate(RPKM=`All Mapped Reads` /(`Reference Length`/1000 * totalNumReads/1000000))
library(ggplot2)
ggplot(RGI_data, aes(`Average MAPQ (Completely Mapped Reads)`)) +
geom_histogram(bins=50, aes(y = stat(density)))+geom_density()+theme_bw()
ggplot(RGI_data, aes(`Average MAPQ (Completely Mapped Reads)`)) +
geom_histogram(bins=50)+theme_bw()
RGI_data<-RGI_data%>%filter(`Average MAPQ (Completely Mapped Reads)`>10)
library(knitr)
n_distinct(RGI_data$`AMR Gene Family`)
AMR_family_RGI<-RGI_data%>%
group_by(`AMR Gene Family`)%>%
summarise('number of AMR genes per family (RGI)'=n(),
sum_RPKM_RGI=sum(RPKM),
avg_MAPQ=mean(`Average MAPQ (Completely Mapped Reads)`),
q1_MAPQ=quantile(`Average MAPQ (Completely Mapped Reads)`, 0.25),
p3_MAPQ=quantile(`Average MAPQ (Completely Mapped Reads)`,0.75),)%>%arrange(desc(sum_RPKM_RGI))
kable(head(AMR_family_RGI))
str(AMR_family_RGI$`sum RPKM (RGI)`)
Ariba_data <- read_delim("ariba_analysis/argannot-150bp-10000-reads_ariba_results/report.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
Ariba_data<-Ariba_data %>% filter(gene==1)%>%select(c(1:8,31))%>%unique()
##Ariba_data<-Ariba_data%>%select(c(1:8,31))%>%unique()
Ariba_data<-Ariba_data%>%mutate(RPKM=reads /(ref_len/1000 * totalNumReads/1000000))
library(stringr)
library(reshape2)
y<-colsplit(Ariba_data$ref_name, "\\.", c("ARO Term", "ARO Accession","NCBI","init_final","Model Sequence ID","X"))
y$NCBI<-ifelse(str_detect(y$init_final, "_"),y$NCBI ,paste(y$NCBI,".",y$init_final) )
y$init_final<-ifelse(str_detect(y$init_final, "_"), y$init_final, y$`Model Sequence ID`)
y$`Model Sequence ID`<-ifelse(str_detect(y$`Model Sequence ID`, "_"), y$X, y$`Model Sequence ID`)
y$`ARO Accession`<-ifelse(y$`ARO Accession`<3000000, y$NCBI, y$`ARO Accession`)
y$`ARO Accession`<-str_split_fixed(y$`ARO Accession`, "\\.", 2)[ ,1]
y<-select(y, -X)
Ariba_data<-cbind(Ariba_data,y)
Ariba_data$`ARO Accession`<-as.numeric(Ariba_data$`ARO Accession`)
Ariba_data<-merge(Ariba_data, select(aro_index,`Model Sequence ID`, `AMR Gene Family`,`Drug Class`, `Resistance Mechanism`,`Protein Accession`,  `ARO Number`, `ARO Name`) , by.x = "ARO Accession", by.y="ARO Number", all.x = TRUE)
table(is.na(Ariba_data$`AMR Gene Family`))
library(knitr)
library(dplyr)
AMR_family_ARIBA<-Ariba_data%>%
group_by(`AMR Gene Family`)%>%
summarise('number of AMR genes per family(ARIBA)'=n(),
'sum_RPKM_ariba'=sum(RPKM))%>%arrange(desc('sum_RPKM_ariba'))
kable(head(AMR_family_ARIBA))
library(readr)
Groot_data <- read_delim("groot_analysis/argannot-150bp-10000-reads-uniqseq-0report",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
names(Groot_data)<-c("AMR.gene", "read.count", "gene.length", "coverage.cigar")
head(Groot_data)
library(stringr)
library(reshape2)
library(dplyr)
y<-colsplit(Groot_data$AMR.gene, "\\.", c("ARO Term", "ARO Accession","NCBI","init_final","Model Sequence ID","X"))
y$NCBI<-ifelse(str_detect(y$init_final, "-"),y$NCBI ,paste(y$NCBI,".",y$init_final, sep = "") )
y$init_final<-ifelse(str_detect(y$init_final, "-"), y$init_final, y$`Model Sequence ID`)
y$`Model Sequence ID`<-ifelse(str_detect(y$`Model Sequence ID`, "-"), y$X, y$`Model Sequence ID`)
y$`ARO Accession`<-ifelse(y$`ARO Accession`<3000000, y$NCBI, y$`ARO Accession`)
y$`ARO Accession`<-str_split_fixed(y$`ARO Accession`, "\\.", 2)[ ,1]
y<-select(y, -X)
Groot_data<-cbind(Groot_data,y)
Groot_data$`ARO Accession`<-as.numeric(Groot_data$`ARO Accession`)
Groot_data<-merge(Groot_data, select(aro_index,`Model Sequence ID`, `AMR Gene Family`,`Drug Class`, `Resistance Mechanism`,`Protein Accession`, `ARO Number`, `ARO Name`) ,  by.x = "ARO Accession", by.y="ARO Number", all.x = TRUE)
table(is.na(Groot_data$`AMR Gene Family`))
Groot_data<-Groot_data%>%filter(!is.na(`Protein Accession`))
Groot_data<-Groot_data%>%mutate(RPKM=read.count /(gene.length/1000 * totalNumReads/1000000))
library(knitr)
n_distinct(Groot_data$`AMR Gene Family`)
AMR_family_Groot<-Groot_data%>%
group_by(`AMR Gene Family`)%>%
summarise('number of AMR genes per family (groot)'=n(),
sum_RPKM_groot=sum(RPKM))%>%arrange(desc(sum_RPKM_groot))
kable(head(AMR_family_Groot))
length(AMR_family_ARIBA$`AMR Gene Family`)
length(AMR_family_RGI$`AMR Gene Family`)
length(AMR_family_Groot$`AMR Gene Family`)
AMR_family<-merge(AMR_family_ARIBA, AMR_family_RGI[ ,1:3], by="AMR Gene Family", all=TRUE)
AMR_family<-merge(AMR_family, AMR_family_Groot, by="AMR Gene Family", all=TRUE)
venntransform<-function(x){
x$RGI<-ifelse(is.na(x$sum_RPKM_RGI),FALSE,TRUE)
x$Ariba<-ifelse(is.na(x$sum_RPKM_ariba),FALSE,TRUE)
x$Groot<-ifelse(is.na(x$sum_RPKM_groot),FALSE,TRUE)
x$All<-ifelse(x$RGI==TRUE & x$Ariba==TRUE & x$Groot==TRUE, TRUE, FALSE)
return(x)}
library(ggvenn)
vennplot<-function(x){
y<-ggplot(x) + geom_venn(aes(A = RGI, B = Ariba, C = Groot),fill_color = c("chartreuse", "orange", "darkorchid1"), text_size=4, set_name_size = 2, stroke_size = 0.2, show_percentage = FALSE)+theme_void()+coord_fixed()+theme(title=element_text(size=5))
return(y)}
AMR_family_venn<-venntransform(AMR_family)
vennplot(AMR_family_venn)
data_trans<-function(x){
x$RGI<-ifelse(is.na(x$sum_RPKM_RGI),0,1)
x$Ariba<-ifelse(is.na(x$sum_RPKM_ariba),0,1)
x$Groot<-ifelse(is.na(x$sum_RPKM_groot),0,1)
x$npipelines<-apply(select(x, RGI, Ariba,Groot),1, sum)
x$npipelines<-as.factor(x$npipelines)
x$pipelines<-ifelse(x$npipelines==3, "All",
ifelse(x$npipelines==2 & x$RGI==0, "Groot+Ariba",
ifelse(x$npipelines==2 & x$Ariba==0, "RGI+Groot",
ifelse(x$npipelines==2 & x$Groot==0, "RGI+Ariba",
ifelse(x$RGI==1, "RGI only",
ifelse(x$Ariba==1, "Ariba only", "Groot only"))))))
x$pipelines_class<-ifelse(x$npipelines==1,0,1)
return(x)}
AMR_family<-data_trans(AMR_family)
AMR_family[AMR_family$pipelines=="RGI only" ,1]
AMR_family[AMR_family$pipelines=="Groot only" ,1]
AMR_family[AMR_family$pipelines=="RGI+Groot" ,1]
AMR_family[AMR_family$pipelines=="Groot+Ariba" ,1]
library(cutpointr)
RGI_data<-merge(RGI_data, select(AMR_family, pipelines, `AMR Gene Family`), by="AMR Gene Family", all.x = TRUE)
Groot_data<-merge(Groot_data, select(AMR_family, pipelines, `AMR Gene Family`), by="AMR Gene Family", all.x = TRUE)
Ariba_data<-merge(Ariba_data, select(AMR_family, pipelines, `AMR Gene Family`), by="AMR Gene Family", all.x = TRUE)
table(RGI_data$pipelines)
RGI_seqs<-RGI_data%>%filter(pipelines!="All")%>%select(`Reference Sequence`)
Groot_seqs<-Groot_data%>%filter(pipelines!="All")%>%select(AMR.gene)
Ariba_seqs<-Ariba_data%>%filter(pipelines!="All")%>%select(ref_name)
AMR_family_venn<-venntransform(AMR_family)
vennplot(AMR_family_venn)
vennplot(AMR_family_venn)
library(ggvenn)
vennplot<-function(x){
y<-ggplot(x) + geom_venn(aes(A = RGI, B = Ariba, C = Groot),fill_color = c("chartreuse", "orange", "darkorchid1"), text_size=4, set_name_size = 2, stroke_size = 0.2, show_percentage = FALSE)+theme_void()+coord_fixed()+theme(title=element_text(size=10))
return(y)}
AMR_family_venn<-venntransform(AMR_family)
vennplot(AMR_family_venn)
vennplot<-function(x){
y<-ggplot(x) + geom_venn(aes(A = RGI, B = Ariba, C = Groot),fill_color = c("chartreuse", "orange", "darkorchid1"), text_size=4, set_name_size = 2, stroke_size = 0.2, show_percentage = FALSE)+theme_void()+coord_fixed()+theme(title=element_text(size=20))
return(y)}
AMR_family_venn<-venntransform(AMR_family)
AMR_family_venn<-venntransform(AMR_family)
vennplot(AMR_family_venn)
vennplot(AMR_family_venn)
vennplot<-function(x){
y<-ggplot(x) + geom_venn(aes(A = RGI, B = Ariba, C = Groot),fill_color = c("chartreuse", "orange", "darkorchid1"), text_size=20, set_name_size = 2, stroke_size = 0.2, show_percentage = FALSE)+theme_void()+coord_fixed()+theme(title=element_text(size=5))
return(y)}
AMR_family_venn<-venntransform(AMR_family)
vennplot(AMR_family_venn)
venntransform<-function(x){
x$RGI<-ifelse(is.na(x$sum_RPKM_RGI),FALSE,TRUE)
x$Ariba<-ifelse(is.na(x$sum_RPKM_ariba),FALSE,TRUE)
x$Groot<-ifelse(is.na(x$sum_RPKM_groot),FALSE,TRUE)
x$All<-ifelse(x$RGI==TRUE & x$Ariba==TRUE & x$Groot==TRUE, TRUE, FALSE)
return(x)}
library(ggvenn)
vennplot<-function(x){
y<-ggplot(x) + geom_venn(aes(A = RGI, B = Ariba, C = Groot),fill_color = c("chartreuse", "orange", "darkorchid1"), text_size=4, set_name_size = 2, stroke_size = 0.2, show_percentage = FALSE)+theme_void()+coord_fixed()+theme(title=element_text(size=20))
return(y)}
AMR_family_venn<-venntransform(AMR_family)
vennplot(AMR_family_venn)
venntransform<-function(x){
x$RGI<-ifelse(is.na(x$sum_RPKM_RGI),FALSE,TRUE)
x$Ariba<-ifelse(is.na(x$sum_RPKM_ariba),FALSE,TRUE)
x$Groot<-ifelse(is.na(x$sum_RPKM_groot),FALSE,TRUE)
x$All<-ifelse(x$RGI==TRUE & x$Ariba==TRUE & x$Groot==TRUE, TRUE, FALSE)
return(x)}
library(ggvenn)
vennplot<-function(x){
y<-ggplot(x) + geom_venn(aes(A = RGI, B = Ariba, C = Groot),fill_color = c("chartreuse", "orange", "darkorchid1"), text_size=4, set_name_size = 10, stroke_size = 0.2, show_percentage = FALSE)+theme_void()+coord_fixed()+theme(title=element_text(size=20))
return(y)}
AMR_family_venn<-venntransform(AMR_family)
vennplot(AMR_family_venn)
venntransform<-function(x){
x$RGI<-ifelse(is.na(x$sum_RPKM_RGI),FALSE,TRUE)
x$Ariba<-ifelse(is.na(x$sum_RPKM_ariba),FALSE,TRUE)
x$Groot<-ifelse(is.na(x$sum_RPKM_groot),FALSE,TRUE)
x$All<-ifelse(x$RGI==TRUE & x$Ariba==TRUE & x$Groot==TRUE, TRUE, FALSE)
return(x)}
library(ggvenn)
vennplot<-function(x){
y<-ggplot(x) + geom_venn(aes(A = RGI, B = Ariba, C = Groot),fill_color = c("chartreuse", "orange", "darkorchid1"), text_size=4, set_name_size = 5, stroke_size = 0.2, show_percentage = FALSE)+theme_void()+coord_fixed()+theme(title=element_text(size=20))
return(y)}
AMR_family_venn<-venntransform(AMR_family)
vennplot(AMR_family_venn)
vennplot(AMR_family_venn)
AMR_family[AMR_family$pipelines=="RGI only" ,1]
AMR_family[AMR_family$pipelines=="Groot only" ,1]
AMR_family[AMR_family$pipelines=="RGI+Groot" ,1]
AMR_family[AMR_family$pipelines=="Groot+Ariba" ,1]
AMR_family[AMR_family$pipelines=="RGI only" ,1]
AMR_family[AMR_family$pipelines=="Groot only" ,1]
AMR_family[AMR_family$pipelines=="RGI+Groot" ,1]
AMR_family[AMR_family$pipelines=="Groot+Ariba" ,1]
View(Groot_seqs)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Documentos/Repos/UOC-Master/data_testing/")
library(stringr)
library(reshape2)
library(readr)
library(dplyr)
aro_index <- read_delim("~/Documentos/Repos/UOC-Master/PRJNA307231/aro_index.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
dim(aro_index)
length(unique(aro_index$`ARO Accession`))
y<-colsplit(aro_index$`ARO Accession`, ":", c("X", "ARO Number"))
aro_index<-cbind(aro_index, select(y, `ARO Number`))
library(readr)
RGI_data <- read_delim("RGI_analysis/argannot-150bp-10000-reads.fastq_RGI_output.allele_mapping_data.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
RGI_data<-merge(
select(RGI_data, -`AMR Gene Family`, -`Drug Class`, -`Resistance Mechanism`),
select(aro_index,`Model Sequence ID`, `AMR Gene Family`,`Drug Class`, `Resistance Mechanism`,`Protein Accession`,`ARO Number`, `ARO Name` ), by.x = "ARO Accession", by.y="ARO Number", all.x = TRUE)
table(is.na(RGI_data$`AMR Gene Family`))
library(dplyr)
totalNumReads<-	10000
RGI_data<-RGI_data%>%mutate(RPKM=`All Mapped Reads` /(`Reference Length`/1000 * totalNumReads/1000000))
library(ggplot2)
ggplot(RGI_data, aes(`Average MAPQ (Completely Mapped Reads)`)) +
geom_histogram(bins=50, aes(y = stat(density)))+geom_density()+theme_bw()
ggplot(RGI_data, aes(`Average MAPQ (Completely Mapped Reads)`)) +
geom_histogram(bins=50)+theme_bw()
RGI_data<-RGI_data%>%filter(`Average MAPQ (Completely Mapped Reads)`>10)
library(knitr)
n_distinct(RGI_data$`AMR Gene Family`)
AMR_family_RGI<-RGI_data%>%
group_by(`AMR Gene Family`)%>%
summarise('number of AMR genes per family (RGI)'=n(),
sum_RPKM_RGI=sum(RPKM),
avg_MAPQ=mean(`Average MAPQ (Completely Mapped Reads)`),
q1_MAPQ=quantile(`Average MAPQ (Completely Mapped Reads)`, 0.25),
p3_MAPQ=quantile(`Average MAPQ (Completely Mapped Reads)`,0.75),)%>%arrange(desc(sum_RPKM_RGI))
kable(head(AMR_family_RGI))
str(AMR_family_RGI$`sum RPKM (RGI)`)
Ariba_data <- read_delim("ariba_analysis/argannot-150bp-10000-reads_ariba_results/report.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE)
Ariba_data<-Ariba_data %>% filter(gene==1)%>%select(c(1:8,31))%>%unique()
##Ariba_data<-Ariba_data%>%select(c(1:8,31))%>%unique()
Ariba_data<-Ariba_data%>%mutate(RPKM=reads /(ref_len/1000 * totalNumReads/1000000))
library(stringr)
library(reshape2)
y<-colsplit(Ariba_data$ref_name, "\\.", c("ARO Term", "ARO Accession","NCBI","init_final","Model Sequence ID","X"))
y$NCBI<-ifelse(str_detect(y$init_final, "_"),y$NCBI ,paste(y$NCBI,".",y$init_final) )
y$init_final<-ifelse(str_detect(y$init_final, "_"), y$init_final, y$`Model Sequence ID`)
y$`Model Sequence ID`<-ifelse(str_detect(y$`Model Sequence ID`, "_"), y$X, y$`Model Sequence ID`)
y$`ARO Accession`<-ifelse(y$`ARO Accession`<3000000, y$NCBI, y$`ARO Accession`)
y$`ARO Accession`<-str_split_fixed(y$`ARO Accession`, "\\.", 2)[ ,1]
y<-select(y, -X)
Ariba_data<-cbind(Ariba_data,y)
Ariba_data$`ARO Accession`<-as.numeric(Ariba_data$`ARO Accession`)
Ariba_data<-merge(Ariba_data, select(aro_index,`Model Sequence ID`, `AMR Gene Family`,`Drug Class`, `Resistance Mechanism`,`Protein Accession`,  `ARO Number`, `ARO Name`) , by.x = "ARO Accession", by.y="ARO Number", all.x = TRUE)
table(is.na(Ariba_data$`AMR Gene Family`))
library(knitr)
library(dplyr)
AMR_family_ARIBA<-Ariba_data%>%
group_by(`AMR Gene Family`)%>%
summarise('number of AMR genes per family(ARIBA)'=n(),
'sum_RPKM_ariba'=sum(RPKM))%>%arrange(desc('sum_RPKM_ariba'))
kable(head(AMR_family_ARIBA))
library(readr)
Groot_data <- read_delim("groot_analysis/argannot-150bp-10000-reads-uniqseq-0report",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
names(Groot_data)<-c("AMR.gene", "read.count", "gene.length", "coverage.cigar")
head(Groot_data)
library(stringr)
library(reshape2)
library(dplyr)
y<-colsplit(Groot_data$AMR.gene, "\\.", c("ARO Term", "ARO Accession","NCBI","init_final","Model Sequence ID","X"))
y$NCBI<-ifelse(str_detect(y$init_final, "-"),y$NCBI ,paste(y$NCBI,".",y$init_final, sep = "") )
y$init_final<-ifelse(str_detect(y$init_final, "-"), y$init_final, y$`Model Sequence ID`)
y$`Model Sequence ID`<-ifelse(str_detect(y$`Model Sequence ID`, "-"), y$X, y$`Model Sequence ID`)
y$`ARO Accession`<-ifelse(y$`ARO Accession`<3000000, y$NCBI, y$`ARO Accession`)
y$`ARO Accession`<-str_split_fixed(y$`ARO Accession`, "\\.", 2)[ ,1]
y<-select(y, -X)
Groot_data<-cbind(Groot_data,y)
Groot_data$`ARO Accession`<-as.numeric(Groot_data$`ARO Accession`)
Groot_data<-merge(Groot_data, select(aro_index,`Model Sequence ID`, `AMR Gene Family`,`Drug Class`, `Resistance Mechanism`,`Protein Accession`, `ARO Number`, `ARO Name`) ,  by.x = "ARO Accession", by.y="ARO Number", all.x = TRUE)
table(is.na(Groot_data$`AMR Gene Family`))
Groot_data<-Groot_data%>%filter(!is.na(`Protein Accession`))
Groot_data<-Groot_data%>%mutate(RPKM=read.count /(gene.length/1000 * totalNumReads/1000000))
library(knitr)
n_distinct(Groot_data$`AMR Gene Family`)
AMR_family_Groot<-Groot_data%>%
group_by(`AMR Gene Family`)%>%
summarise('number of AMR genes per family (groot)'=n(),
sum_RPKM_groot=sum(RPKM))%>%arrange(desc(sum_RPKM_groot))
kable(head(AMR_family_Groot))
length(AMR_family_ARIBA$`AMR Gene Family`)
length(AMR_family_RGI$`AMR Gene Family`)
length(AMR_family_Groot$`AMR Gene Family`)
AMR_family<-merge(AMR_family_ARIBA, AMR_family_RGI[ ,1:3], by="AMR Gene Family", all=TRUE)
AMR_family<-merge(AMR_family, AMR_family_Groot, by="AMR Gene Family", all=TRUE)
venntransform<-function(x){
x$RGI<-ifelse(is.na(x$sum_RPKM_RGI),FALSE,TRUE)
x$Ariba<-ifelse(is.na(x$sum_RPKM_ariba),FALSE,TRUE)
x$Groot<-ifelse(is.na(x$sum_RPKM_groot),FALSE,TRUE)
x$All<-ifelse(x$RGI==TRUE & x$Ariba==TRUE & x$Groot==TRUE, TRUE, FALSE)
return(x)}
library(ggvenn)
vennplot<-function(x){
y<-ggplot(x) + geom_venn(aes(A = RGI, B = Ariba, C = Groot),fill_color = c("chartreuse", "orange", "darkorchid1"), text_size=4, set_name_size = 5, stroke_size = 0.2, show_percentage = FALSE)+theme_void()+coord_fixed()+theme(title=element_text(size=20))
return(y)}
AMR_family_venn<-venntransform(AMR_family)
vennplot(AMR_family_venn)
data_trans<-function(x){
x$RGI<-ifelse(is.na(x$sum_RPKM_RGI),0,1)
x$Ariba<-ifelse(is.na(x$sum_RPKM_ariba),0,1)
x$Groot<-ifelse(is.na(x$sum_RPKM_groot),0,1)
x$npipelines<-apply(select(x, RGI, Ariba,Groot),1, sum)
x$npipelines<-as.factor(x$npipelines)
x$pipelines<-ifelse(x$npipelines==3, "All",
ifelse(x$npipelines==2 & x$RGI==0, "Groot+Ariba",
ifelse(x$npipelines==2 & x$Ariba==0, "RGI+Groot",
ifelse(x$npipelines==2 & x$Groot==0, "RGI+Ariba",
ifelse(x$RGI==1, "RGI only",
ifelse(x$Ariba==1, "Ariba only", "Groot only"))))))
x$pipelines_class<-ifelse(x$npipelines==1,0,1)
return(x)}
AMR_family<-data_trans(AMR_family)
AMR_family[AMR_family$pipelines=="RGI only" ,1]
AMR_family[AMR_family$pipelines=="Groot only" ,1]
AMR_family[AMR_family$pipelines=="RGI+Groot" ,1]
AMR_family[AMR_family$pipelines=="Groot+Ariba" ,1]
library(cutpointr)
library(patchwork)
roc_RGI
AMR_family$pipelines<-factor(AMR_family$pipelines, ordered = TRUE, levels = c("RGI only", "Ariba only", "Groot only", "Groot+Ariba", "RGI+Groot", "RGI+Ariba", "All"))
p_RGI<-ggplot(subset(AMR_family, AMR_family$RGI==1), aes(pipelines, sum_RPKM_RGI))+geom_boxplot(aes(colour=npipelines), outlier.shape = NA, na.rm = TRUE)+geom_jitter(width = 0.2, aes(colour=npipelines))+theme_classic()+theme(legend.position = "none")+ggtitle("RGI")
p_Ariba<-ggplot(subset(AMR_family, AMR_family$Ariba==1), aes(pipelines, sum_RPKM_ariba))+geom_boxplot(aes(colour=npipelines), outlier.shape = NA, na.rm = TRUE)+geom_jitter(width = 0.2, aes(colour=npipelines))+theme_classic()+theme(legend.position = "none")+ggtitle("Ariba")
p_Groot<-ggplot(subset(AMR_family, AMR_family$Groot==1), aes(pipelines, sum_RPKM_groot))+geom_boxplot(aes(colour=npipelines), outlier.shape = NA, na.rm = TRUE)+geom_jitter(width = 0.2, aes(colour=npipelines))+theme_classic()+theme(legend.position = "none")+ggtitle("Groot")
p_RGI+scale_y_continuous(trans='log10')
p_Ariba+scale_y_continuous(trans='log10')
p_Groot+scale_y_continuous(trans='log10')
box_RGI<-p_RGI+geom_abline(slope = 0, intercept = cp_RGI$optimal_cutpoint, color = "red", linetype = "dotted")+
scale_y_continuous(trans='log10')
RGI_data<-merge(RGI_data, select(AMR_family, pipelines, `AMR Gene Family`), by="AMR Gene Family", all.x = TRUE)
Groot_data<-merge(Groot_data, select(AMR_family, pipelines, `AMR Gene Family`), by="AMR Gene Family", all.x = TRUE)
Ariba_data<-merge(Ariba_data, select(AMR_family, pipelines, `AMR Gene Family`), by="AMR Gene Family", all.x = TRUE)
RGI_seqs<-RGI_data%>%filter(pipelines!="All")%>%select(`Reference Sequence`)
Groot_seqs<-Groot_data%>%filter(pipelines!="All")%>%select(AMR.gene)
Ariba_seqs<-Ariba_data%>%filter(pipelines!="All")%>%select(ref_name)
library(readr)
RGI_seqs_bam <- read_delim("RGI_analysis/RGI_seqs_bam.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
RGI_seqs_bam<-RGI_seqs_bam%>%select(X1, X3)%>%rename(data_seq=X1, `Reference Sequence`=X3 )
Groot_seqs_bam <- read_delim("groot_analysis/Groot_seqs_bam.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
Groot_seqs_bam<-Groot_seqs_bam%>%select(X1, X3)%>%rename(data_seq=X1, `Reference Sequence`=X3 )
Groot_seqs_bam$`Reference Sequence`<-str_remove(Groot_seqs_bam$`Reference Sequence`, "\\*")
RGI_seqs_bam<-merge(RGI_seqs_bam, select(RGI_data, `AMR Gene Family`,`Reference Sequence`,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by="Reference Sequence", all.x = TRUE)
RGI_seqs_bam$data_seq_simplified<-str_split_fixed(RGI_seqs_bam$data_seq, "~~~", 3)[,2]
RGI_seqs_bam$data_seq_simplified<-str_split_fixed(RGI_seqs_bam$data_seq_simplified, "\\)", 2)[ ,2]
Groot_seqs_bam<-merge(Groot_seqs_bam, select(Groot_data, `AMR Gene Family`,AMR.gene,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by.x="Reference Sequence", by.y="AMR.gene", all.x = TRUE)
Groot_seqs_bam$data_seq_simplified<-str_split_fixed(Groot_seqs_bam$data_seq, "~~~", 3)[,2]
Groot_seqs_bam$data_seq_simplified<-str_split_fixed(Groot_seqs_bam$data_seq_simplified, "\\)", 2)[ ,2]
View(Groot_seqs_bam)
tolower(Groot_seqs_bam$data_seq_simplified)%in%tolower(Groot_seqs_bam$`ARO Term`)
Groot_seqs_bam$data_seq_simplified$concordance<-ifelse(tolower(Groot_seqs_bam$data_seq_simplified)%in%tolower(Groot_seqs_bam$`ARO Term`),1,0)
Groot_seqs_bam$concordance<-ifelse(tolower(Groot_seqs_bam$data_seq_simplified)%in%tolower(Groot_seqs_bam$`ARO Term`),1,0)
View(RGI_data)
View(RGI_seqs_bam)
RGI_seqs_bam$concordance<-ifelse(tolower(RGI_seqs_bam$data_seq_simplified)%in%tolower(RGI_seqs_bam$`ARO Term`),1,0)
Groot_seqs_bam$concordance<-ifelse(tolower(Groot_seqs_bam$data_seq_simplified)%in%tolower(Groot_seqs_bam$`ARO Term`),1,0)
write_tsv(RGI_seqs_bam, "RGI_analysis/RGI_seqs_bam.tsv")
write_tsv(Groot_seqs_bam, "groot_analysis/Groot_seqs_bam.tsv")
Groot_seqs_bam$concordance<-ifelse(tolower(Groot_seqs_bam$data_seq_simplified)%in%tolower(Groot_seqs_bam$`ARO Term`) | tolower(Groot_seqs_bam$`ARO Term`)%in%tolower(Groot_seqs_bam$data_seq_simplified) ,1,0)
RGI_seqs_bam<-merge(RGI_seqs_bam, select(RGI_data, `AMR Gene Family`,`Reference Sequence`,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by="Reference Sequence", all.x = TRUE)
RGI_seqs_bam$data_seq_simplified<-str_split_fixed(RGI_seqs_bam$data_seq, "~~~", 3)[,2]
RGI_seqs_bam$data_seq_simplified<-str_split_fixed(RGI_seqs_bam$data_seq_simplified, "\\)", 2)[ ,2]
RGI_seqs_bam$concordance<-ifelse(tolower(RGI_seqs_bam$data_seq_simplified)%in%tolower(RGI_seqs_bam$`ARO Term`) | tolower(RGI_seqs_bam$`ARO Term`)%in%tolower(RGI_seqs_bam$data_seq_simplified),1,0)
Groot_seqs_bam<-merge(Groot_seqs_bam, select(Groot_data, `AMR Gene Family`,AMR.gene,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by.x="Reference Sequence", by.y="AMR.gene", all.x = TRUE)
Groot_seqs_bam$data_seq_simplified<-str_split_fixed(Groot_seqs_bam$data_seq, "~~~", 3)[,2]
Groot_seqs_bam$data_seq_simplified<-str_split_fixed(Groot_seqs_bam$data_seq_simplified, "\\)", 2)[ ,2]
Groot_seqs_bam$concordance<-ifelse(tolower(Groot_seqs_bam$data_seq_simplified)%in%tolower(Groot_seqs_bam$`ARO Term`) | tolower(Groot_seqs_bam$`ARO Term`)%in%tolower(Groot_seqs_bam$data_seq_simplified) ,1,0)
RGI_seqs_bam<-merge(RGI_seqs_bam, select(RGI_data, `AMR Gene Family`,`Reference Sequence`,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by="Reference Sequence", all.x = TRUE)
RGI_seqs_bam$data_seq_simplified<-str_split_fixed(RGI_seqs_bam$data_seq, "~~~", 3)[,2]
RGI_seqs_bam$data_seq_simplified<-str_split_fixed(RGI_seqs_bam$data_seq_simplified, "\\)", 2)[ ,2]
RGI_seqs_bam$concordance<-ifelse(tolower(RGI_seqs_bam$data_seq_simplified)%in%tolower(RGI_seqs_bam$`ARO Term`) | tolower(RGI_seqs_bam$`ARO Term`)%in%tolower(RGI_seqs_bam$data_seq_simplified),1,0)
RGI_seqs_bam<-merge(RGI_seqs_bam, select(RGI_data, `AMR Gene Family`,`Reference Sequence`,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by="Reference Sequence", all.x = TRUE)
RGI_seqs_bam$data_seq_simplified<-str_split_fixed(RGI_seqs_bam$data_seq, "~~~", 3)[,2]
RGI_seqs_bam$data_seq_simplified<-str_split_fixed(RGI_seqs_bam$data_seq_simplified, "\\)", 2)[ ,2]
RGI_seqs_bam$concordance<-ifelse(tolower(RGI_seqs_bam$data_seq_simplified)%in%tolower(RGI_seqs_bam$`ARO Term`) | tolower(RGI_seqs_bam$`ARO Term`)%in%tolower(RGI_seqs_bam$data_seq_simplified),1,0)
RGI_seqs_bam<-merge(RGI_seqs_bam, select(RGI_data, `AMR Gene Family`,`Reference Sequence`,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by="Reference Sequence", all.x = TRUE)
library(readr)
RGI_seqs_bam <- read_delim("RGI_analysis/RGI_seqs_bam.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
RGI_seqs_bam<-RGI_seqs_bam%>%select(X1, X3)%>%rename(data_seq=X1, `Reference Sequence`=X3 )
Groot_seqs_bam <- read_delim("groot_analysis/Groot_seqs_bam.txt",
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE)
Groot_seqs_bam<-Groot_seqs_bam%>%select(X1, X3)%>%rename(data_seq=X1, `Reference Sequence`=X3 )
Groot_seqs_bam$`Reference Sequence`<-str_remove(Groot_seqs_bam$`Reference Sequence`, "\\*")
RGI_seqs_bam<-merge(RGI_seqs_bam, select(RGI_data, `AMR Gene Family`,`Reference Sequence`,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by="Reference Sequence", all.x = TRUE)
RGI_seqs_bam$data_seq_simplified<-str_split_fixed(RGI_seqs_bam$data_seq, "~~~", 3)[,2]
RGI_seqs_bam$data_seq_simplified<-str_split_fixed(RGI_seqs_bam$data_seq_simplified, "\\)", 2)[ ,2]
RGI_seqs_bam$concordance<-ifelse(tolower(RGI_seqs_bam$data_seq_simplified)%in%tolower(RGI_seqs_bam$`ARO Term`) | tolower(RGI_seqs_bam$`ARO Term`)%in%tolower(RGI_seqs_bam$data_seq_simplified),1,0)
Groot_seqs_bam<-merge(Groot_seqs_bam, select(Groot_data, `AMR Gene Family`,AMR.gene,`ARO Term`, `Resistance Mechanism`, `Drug Class`, RPKM, pipelines), by.x="Reference Sequence", by.y="AMR.gene", all.x = TRUE)
Groot_seqs_bam$data_seq_simplified<-str_split_fixed(Groot_seqs_bam$data_seq, "~~~", 3)[,2]
Groot_seqs_bam$data_seq_simplified<-str_split_fixed(Groot_seqs_bam$data_seq_simplified, "\\)", 2)[ ,2]
Groot_seqs_bam$concordance<-ifelse(tolower(Groot_seqs_bam$data_seq_simplified)%in%tolower(Groot_seqs_bam$`ARO Term`) | tolower(Groot_seqs_bam$`ARO Term`)%in%tolower(Groot_seqs_bam$data_seq_simplified) ,1,0)
write_tsv(RGI_seqs_bam, "RGI_analysis/RGI_seqs_bam.tsv")
write_tsv(Groot_seqs_bam, "groot_analysis/Groot_seqs_bam.tsv")
